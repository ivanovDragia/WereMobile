package com.leetsoft.weremobile;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.SearchView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.leetsoft.weremobile.adapters.DocumentAdapter;
import com.leetsoft.weremobile.adapters.ProductsAddBarcodeAdapter;
import com.leetsoft.weremobile.database.Barcodes;
import com.leetsoft.weremobile.database.Contragents;
import com.leetsoft.weremobile.database.DatabaseHelper;
import com.leetsoft.weremobile.database.Products;

import java.util.ArrayList;
import java.util.Collections;

public class ProductsAddBarcodeActivity extends AppCompatActivity {
    private static final String TAG = "PrBarcodeActivity";

    int productID;

    TextView nameTV;
    TextView quantityTV;
    TextView priceTV;
    TextView productNumberTV;

    DatabaseHelper db = new DatabaseHelper(this);

    ArrayList<Products> lookupArray=new ArrayList<>();
    Products product;
    ArrayList<Barcodes> barcodesUnfiltered=new ArrayList<>();
    ArrayList<Barcodes> barcodesFiltered=new ArrayList<>();

    Button scanBtn;






    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.products_add_barcode_layout);
        Log.d(TAG, "onCreate: started.");


        Bundle bundle=getIntent().getExtras();
        productID=bundle.getInt("id");

        lookupArray=db.getAllProducts();

        for(int i=0;i<lookupArray.size();i++){
            if(lookupArray.get(i).getId()==productID){
                product=lookupArray.get(i);
            }
        }

        nameTV=findViewById(R.id.ProductsAddBarcodeNameTF);
        quantityTV=findViewById(R.id.ProductsAddBarcodeQuantityTF);
        priceTV=findViewById(R.id.ProductsAddBarcodePriceTF);
        productNumberTV=findViewById(R.id.ProductsAddBarcodeNumberTF);
        scanBtn=findViewById(R.id.ProductsAddBarcodeScanBtn);

        nameTV.setText(product.getName());
        quantityTV.setText(String.valueOf(product.getQuantity()));
        priceTV.setText(String.valueOf(product.getPrice()));
        productNumberTV.setText(product.getProduct_number());

        barcodesUnfiltered = db.getAllBarcodes();

        if(!barcodesUnfiltered.isEmpty()){
            for(int i=0;i<barcodesUnfiltered.size();i++){
                if(barcodesUnfiltered.get(i).getProduct_id()==productID){
                    barcodesFiltered.add(barcodesUnfiltered.get(i));
                }
            }
        }

        RecyclerView barcodesRecyclerView = findViewById(R.id.ProductsAddBarcodeRecyclerView);
        ProductsAddBarcodeAdapter adapter = new ProductsAddBarcodeAdapter(this, barcodesFiltered);
        barcodesRecyclerView.setAdapter(adapter);
        barcodesRecyclerView.setLayoutManager(new LinearLayoutManager(this));

        scanBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (hasPermission(getApplicationContext(), Manifest.permission.CAMERA)) {
                    Intent intent = new Intent(getApplicationContext() , ProductsAddBarcodeScanActivity.class);
                    Bundle bundle=new Bundle();
                    bundle.putInt("id", productID);
                    intent.putExtras(bundle);

                    getApplicationContext().startActivity(intent);
                } else {
                    ActivityCompat.requestPermissions(ProductsAddBarcodeActivity.this, new String[]{Manifest.permission.CAMERA}, 102);
                }
            }
        });



    }

    private boolean hasPermission(Context context, String permission) {
        return ContextCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == 102) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                //permission granted
                startActivity(new Intent(getApplicationContext(), ScanCodeActivity.class));
            } else {
                //permission denied
                Toast.makeText(this, "Permission is Denied.", Toast.LENGTH_SHORT).show();
            }
        }
    }
}
