package com.leetsoft.weremobile.adapters;

import android.content.Context;
import android.content.Intent;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.GridLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.leetsoft.weremobile.DocumentInformationActivity;
import com.leetsoft.weremobile.R;
import com.leetsoft.weremobile.database.DatabaseHelper;
import com.leetsoft.weremobile.database.Documents;
import com.leetsoft.weremobile.util.DataUtil;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Created by Georgi Shukov on 12.1.2021 Ð³..
 */
public class DocumentAdapter extends RecyclerView.Adapter<DocumentAdapter.ViewHolder> implements Filterable {
    private static final String TAG = "DocumentAdapter";

    Context context;
    List<Documents> documentsList;
    List<Documents> allDocumentsList;
    HashMap<Integer, String> mapContragents;

    DatabaseHelper db = new DatabaseHelper(context);

    public DocumentAdapter(Context context, List<Documents> documentsList, HashMap<Integer, String> mapContragents) {
        this.context = context;
        this.documentsList = documentsList;
        this.mapContragents = mapContragents;

        allDocumentsList = new ArrayList<>();
        allDocumentsList.addAll(documentsList);
    }


    @NonNull
    @Override
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        Log.d(TAG, "onCreateViewHolder: started");
        //Log.d(TAG, "onCreateViewHolder: Documents list count " + getItemCount());
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.document_recycler_layout, parent, false);
        ViewHolder holder = new ViewHolder(view);
        return holder;
    }


    public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener{

        TextView sourceIDTV;
        TextView destinationIDTV;
        TextView documentNumberTV;
        TextView dateTV;

        GridLayout parentLayout;


        public ViewHolder(@NonNull View itemView) {
            super(itemView);
            sourceIDTV = itemView.findViewById(R.id.documentSourceTextView);
            destinationIDTV = itemView.findViewById(R.id.documentDestinationIDTextView);
            documentNumberTV = itemView.findViewById(R.id.documentDocNumberTextView);
            dateTV = itemView.findViewById(R.id.documentDateTextView);
            parentLayout = itemView.findViewById(R.id.documents_layout);
        }


        @Override
        public void onClick(View v)
        {
            Context context = v.getContext();
            Intent intent = new Intent(context, DocumentInformationActivity.class);
            context.startActivity(intent);
        }

    }


    @Override
    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {

        Documents document = documentsList.get(position);

        holder.sourceIDTV.setText(mapContragents.get(document.getSource_id()));
        holder.destinationIDTV.setText(mapContragents.get(document.getDestination_id()));
        holder.documentNumberTV.setText(String.valueOf(document.getDocument_number()));

        DataUtil dataUtil = new DataUtil();
        holder.dateTV.setText(dataUtil.formatDate(document.getDate()));


        holder.parentLayout.setOnClickListener(v -> {

            Intent intent = new Intent(context, DocumentInformationActivity.class);
            intent.putExtra("document_number",document.getId());
            context.startActivity(intent);
        });

        //Log.d(TAG, "onBindViewHolder: document Date: " + document.getDate());
    }

    @Override
    public int getItemCount() {
        return documentsList.size();
    }

    public Filter getFilter() {
        return new Filter() {
            @Override
            public String convertResultToString(Object resultValue) {
                return String.valueOf(((Documents) resultValue).getDocument_number());
            }

            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                FilterResults filterResults = new FilterResults();
                List<Documents> documentsFiltred = new ArrayList<>();
                if (constraint != null) {
                    for (Documents document : allDocumentsList) {
                        if (String.valueOf(document.getDocument_number()).startsWith(constraint.toString())) {
                            documentsFiltred.add(document);
                        }
                    }

                    filterResults.values = documentsFiltred;
                    filterResults.count = documentsFiltred.size();
                }
                return filterResults;
            }

            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {
                documentsList.clear();
                if (results != null && results.count > 0) {
                    for (Object object : (List<?>) results.values) {
                        if (object instanceof Documents) {
                            documentsList.add((Documents) object);
                        }
                    }
                    notifyDataSetChanged();
                } else if (constraint == null) {

                    documentsList.addAll(allDocumentsList);
                    notifyDataSetChanged();
                }
            }
        };
    }
}

